<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="2.5" jmeter="2.10 r1533061">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="axelHost" elementType="Argument">
            <stringProp name="Argument.name">axelHost</stringProp>
            <stringProp name="Argument.value">${__P(axelHost,localhost)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="rsPort" elementType="Argument">
            <stringProp name="Argument.name">rsPort</stringProp>
            <stringProp name="Argument.value">${__P(rsPort,8181)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="dsPort" elementType="Argument">
            <stringProp name="Argument.name">dsPort</stringProp>
            <stringProp name="Argument.value">${__P(dsPort,8181)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="rsPath" elementType="Argument">
            <stringProp name="Argument.name">rsPath</stringProp>
            <stringProp name="Argument.value">${__P(rsPath,/axel/shs/rs)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="dsPath" elementType="Argument">
            <stringProp name="Argument.name">dsPath</stringProp>
            <stringProp name="Argument.value">${__P(dsPath,/axel/shs/ds)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="shsFrom" elementType="Argument">
            <stringProp name="Argument.name">shsFrom</stringProp>
            <stringProp name="Argument.value">${__P(shsFrom,0000000000.jmeter)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="shsToLocal" elementType="Argument">
            <stringProp name="Argument.name">shsToLocal</stringProp>
            <stringProp name="Argument.value">${__P(shsToLocal,0000000000.jmeter)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="shsToRemote" elementType="Argument">
            <stringProp name="Argument.name">shsToRemote</stringProp>
            <stringProp name="Argument.value">${__P(shsToRemote,1111111111.jmeter)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="startupDelay" elementType="Argument">
            <stringProp name="Argument.name">startupDelay</stringProp>
            <stringProp name="Argument.value">${__P(startupDelay,1)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="duration" elementType="Argument">
            <stringProp name="Argument.name">duration</stringProp>
            <stringProp name="Argument.value">${__P(duration,10)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="threads" elementType="Argument">
            <stringProp name="Argument.name">threads</stringProp>
            <stringProp name="Argument.value">${__P(threads,1)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="httpTimeout" elementType="Argument">
            <stringProp name="Argument.name">httpTimeout</stringProp>
            <stringProp name="Argument.value">${__P(httpTimeout,30000)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
        <collectionProp name="HeaderManager.headers">
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">Content-Type</stringProp>
            <stringProp name="Header.value">message/rfc822</stringProp>
          </elementProp>
        </collectionProp>
      </HeaderManager>
      <hashTree/>
      <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="label params" enabled="true">
        <collectionProp name="UserParameters.names">
          <stringProp name="3573439">txId</stringProp>
          <stringProp name="110776654">txId-</stringProp>
          <stringProp name="55126294">timestamp</stringProp>
        </collectionProp>
        <collectionProp name="UserParameters.thread_values">
          <collectionProp name="1799502732">
            <stringProp name="118040362">${__UUID()}</stringProp>
            <stringProp name="245934942">e7ccba1a-bc65-440c-8eac-41324abbc542</stringProp>
            <stringProp name="334606410">${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss)}</stringProp>
          </collectionProp>
        </collectionProp>
        <boolProp name="UserParameters.per_iteration">true</boolProp>
        <stringProp name="TestPlan.comments">		</stringProp>
      </UserParameters>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="local request response" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${threads}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1380907266000</longProp>
        <longProp name="ThreadGroup.end_time">1380907266000</longProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${duration}</stringProp>
        <stringProp name="ThreadGroup.delay">${startupDelay}</stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="local synchronous request" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">Subject: SHS Message&#xd;
MIME-Version: 1.0&#xd;
Content-Type: multipart/mixed; &#xd;
	boundary=&quot;----=_Part_2_1517651635.1380304248152&quot;&#xd;
&#xd;
------=_Part_2_1517651635.1380304248152&#xd;
Content-Type: text/xml; charset=ISO-8859-1&#xd;
Content-Transfer-Encoding: binary&#xd;
&#xd;
&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot; standalone=&quot;yes&quot;?&gt;&#xd;
&lt;!DOCTYPE shs.label SYSTEM &quot;shs-label-1.2.dtd&quot;&gt;&#xd;
&lt;shs.label version=&quot;1.2&quot; tx.id=&quot;${txId}&quot; corr.id=&quot;${txId}&quot; transfer-type=&quot;synch&quot; message-type=&quot;simple&#xd;
&quot; document-type=&quot;simple&quot; sequence-type=&quot;request&quot; status=&quot;test&quot;&gt;&#xd;
    &lt;from&gt;urn:X-shs:${shsFrom}&lt;/from&gt;&#xd;
    &lt;to&gt;urn:X-shs:${shsToLocal}&lt;/to&gt;&#xd;
    &lt;product&gt;urn:X-shs:00000000-0000-0000-0000-000000000000&lt;/product&gt;&#xd;
    &lt;subject&gt;jmeter testar&lt;/subject&gt;&#xd;
    &lt;datetime&gt;${timestamp}&lt;/datetime&gt;&#xd;
    &lt;content content.id=&quot;ea0aea60-c77e-4411-9d49-86c48f7fe042&quot;&gt;&#xd;
        &lt;data datapartType=&quot;properties&quot; filename=&quot;system.properties&quot;/&gt;&#xd;
    &lt;/content&gt;&#xd;
&lt;/shs.label&gt;&#xd;
&#xd;
------=_Part_2_1517651635.1380304248152&#xd;
Content-Type: application/octet-stream; name=system.properties&#xd;
Content-Transfer-Encoding: base64&#xd;
Content-Disposition: attachment; filename=system.properties&#xd;
&#xd;
IwojIFRoZSBwcm9wZXJ0aWVzIGRlZmluZWQgaW4gdGhpcyBmaWxlIHdpbGwgYmUgbWFkZSBhdmFp&#xd;
bGFibGUgdGhyb3VnaCBzeXN0ZW0KIyBwcm9wZXJ0aWVzIGF0IHRoZSB2ZXJ5IGJlZ2lubmluZyBv&#xd;
ZiB0aGUgS2FyYWYncyBib290IHByb2Nlc3MuCiMKCgojIExvZyBsZXZlbCB3aGVuIHRoZSBwYXgt&#xd;
bG9nZ2luZyBzZXJ2aWNlIGlzIG5vdCBhdmFpbGFibGUKIyBUaGlzIGxldmVsIHdpbGwgb25seSBi&#xd;
ZSB1c2VkIHdoaWxlIHRoZSBwYXgtbG9nZ2luZyBzZXJ2aWNlIGJ1bmRsZQojIGlzIG5vdCBmdWxs&#xd;
eSBhdmFpbGFibGUuCiMgVG8gY2hhbmdlIGxvZyBsZXZlbHMsIHBsZWFzZSByZWZlciB0byB0aGUg&#xd;
b3JnLm9wczRqLnBheC5sb2dnaW5nLmNmZyBmaWxlCiMgaW5zdGVhZC4Kb3JnLm9wczRqLnBheC5s&#xd;
b2dnaW5nLkRlZmF1bHRTZXJ2aWNlTG9nLmxldmVsPUVSUk9SCgojCiMgTmFtZSBvZiB0aGlzIEth&#xd;
cmFmIGluc3RhbmNlLgojCmthcmFmLm5hbWU9YXhlbAoKIwojIERlZmF1bHQgcmVwb3NpdG9yeSB3&#xd;
aGVyZSBidW5kbGVzIHdpbGwgYmUgbG9hZGVkIGZyb20gYmVmb3JlIHVzaW5nCiMgb3RoZXIgTWF2&#xd;
ZW4gcmVwb3NpdG9yaWVzLiAgRm9yIHRoZSBmdWxsIE1hdmVuIGNvbmZpZ3VyYXRpb24sIHNlZQoj&#xd;
IHRoZSBvcmcub3BzNGoucGF4LnVybC5tdm4uY2ZnIGZpbGUuCiMKa2FyYWYuZGVmYXVsdC5yZXBv&#xd;
c2l0b3J5PXN5c3RlbQoKIwojIExvY2F0aW9uIG9mIGEgc2hlbGwgc2NyaXB0IHRoYXQgd2lsbCBi&#xd;
ZSBydW4gd2hlbiBzdGFydGluZyBhIHNoZWxsCiMgc2Vzc2lvbi4gIFRoaXMgc2NyaXB0IGNhbiBi&#xd;
ZSB1c2VkIHRvIGNyZWF0ZSBhbGlhc2VzIGFuZCBkZWZpbmUKIyBhZGRpdGlvbmFsIGNvbW1hbmRz&#xd;
LgojCmthcmFmLnNoZWxsLmluaXQuc2NyaXB0PSR7a2FyYWYuaG9tZX0vZXRjL3NoZWxsLmluaXQu&#xd;
c2NyaXB0CgojCiMgRGVmYXVsdCByb2xlIG5hbWUgdXNlZCBmb3IgY29uc29sZSBhdXRob3JpemF0&#xd;
aW9uIChKTVgsIFNTSCBhbmQgV0VCKQojIFRoZSBzeW50YXggaXMgdGhlIGZvbGxvd2luZzoKIyAg&#xd;
IFtjbGFzc25hbWU6XXByaW5jaXBhbAojIHdoZXJlIGNsYXNzbmFtZSBpcyB0aGUgY2xhc3MgbmFt&#xd;
ZSBvZiB0aGUgcHJpbmNpcGFsIG9iamVjdAojIChkZWZhdWx0cyB0byBvcmcuYXBhY2hlLmthcmFm&#xd;
LmphYXMubW9kdWxlcy5Sb2xlUHJpbmNpcGFsKQojIGFuZCBwcmluY2lwYWwgaXMgdGhlIG5hbWUg&#xd;
b2YgdGhlIHByaW5jaXBhbCBvZiB0aGF0IGNsYXNzCiMgKGRlZmF1bHRzIHRvIGFkbWluKQojCiMg&#xd;
Tm90ZSB0aGF0IHRoaXMgdmFsdWUgY2FuIGJlIG92ZXJyaWRlbiB1c2luZyB0aGUgdmFyaW91cyBD&#xd;
b25maWdBZG1pbgojIGNvbmZpZ3VyYXRpb25zIGZvciBKTVgsIFNTSCBvciB0aGUgV2ViQ29uc29s&#xd;
ZS4KIwprYXJhZi5hZG1pbi5yb2xlPWFkbWluCgojCiMgU2V0IHRoaXMgZW1wdHkgcHJvcGVydHkg&#xd;
dG8gYXZvaWQgZXJyb3JzIHdoZW4gdmFsaWRhdGluZyB4bWwgZG9jdW1lbnRzLgojCnhtbC5jYXRh&#xd;
bG9nLmZpbGVzPQoKIwojIFN1cHByZXNzIHRoZSBiZWxsIGluIHRoZSBjb25zb2xlIHdoZW4gaGl0&#xd;
dGluZyBiYWNrc3BhY2UgdG9vIG1hbnkgdGltZXMKIyBmb3IgZXhhbXBsZQojCmpsaW5lLm5vYmVs&#xd;
bD10cnVlCgojIFdvcmthcm91bmQgZm9yIEtBUkFGLTExMTc6IEpldHR5IHdpbGwgdXNlIGEgSlVM&#xd;
IGxvZ2dlci4Kb3JnLmVjbGlwc2UuamV0dHkudXRpbC5sb2cuY2xhc3M9b3JnLmVjbGlwc2UuamV0&#xd;
dHkudXRpbC5sb2cuSmF2YVV0aWxMb2cKCg==&#xd;
------=_Part_2_1517651635.1380304248152--&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${axelHost}</stringProp>
          <stringProp name="HTTPSampler.port">${rsPort}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout">${httpTimeout}</stringProp>
          <stringProp name="HTTPSampler.response_timeout">${httpTimeout}</stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${rsPath}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="body contains response" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1470960131">I&apos;m completely operational, and all my circuits are functioning perfectly.</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="local send messages" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">startnextloop</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${threads}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1380304144000</longProp>
        <longProp name="ThreadGroup.end_time">1380304144000</longProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${duration}</stringProp>
        <stringProp name="ThreadGroup.delay">${startupDelay}</stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="local asynchronous event" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">Subject: SHS Message&#xd;
MIME-Version: 1.0&#xd;
Content-Type: multipart/mixed; &#xd;
	boundary=&quot;----=_Part_2_1517651635.1380304248152&quot;&#xd;
&#xd;
------=_Part_2_1517651635.1380304248152&#xd;
Content-Type: text/xml; charset=ISO-8859-1&#xd;
Content-Transfer-Encoding: binary&#xd;
&#xd;
&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot; standalone=&quot;yes&quot;?&gt;&#xd;
&lt;!DOCTYPE shs.label SYSTEM &quot;shs-label-1.2.dtd&quot;&gt;&#xd;
&lt;shs.label version=&quot;1.2&quot; tx.id=&quot;${txId}&quot; corr.id=&quot;${txId}&quot; transfer-type=&quot;asynch&quot; message-type=&quot;simple&#xd;
&quot; document-type=&quot;simple&quot; sequence-type=&quot;event&quot; status=&quot;test&quot;&gt;&#xd;
    &lt;from&gt;urn:X-shs:${shsFrom}&lt;/from&gt;&#xd;
    &lt;to&gt;urn:X-shs:${shsToLocal}&lt;/to&gt;&#xd;
    &lt;product&gt;urn:X-shs:00000000-0000-0000-0000-000000000000&lt;/product&gt;&#xd;
    &lt;subject&gt;jmeter testar&lt;/subject&gt;&#xd;
    &lt;datetime&gt;${timestamp}&lt;/datetime&gt;&#xd;
    &lt;content content.id=&quot;ea0aea60-c77e-4411-9d49-86c48f7fe042&quot;&gt;&#xd;
        &lt;data datapartType=&quot;properties&quot; filename=&quot;system.properties&quot;/&gt;&#xd;
    &lt;/content&gt;&#xd;
&lt;/shs.label&gt;&#xd;
&#xd;
------=_Part_2_1517651635.1380304248152&#xd;
Content-Type: application/octet-stream; name=system.properties&#xd;
Content-Transfer-Encoding: base64&#xd;
Content-Disposition: attachment; filename=system.properties&#xd;
&#xd;
IwojIFRoZSBwcm9wZXJ0aWVzIGRlZmluZWQgaW4gdGhpcyBmaWxlIHdpbGwgYmUgbWFkZSBhdmFp&#xd;
bGFibGUgdGhyb3VnaCBzeXN0ZW0KIyBwcm9wZXJ0aWVzIGF0IHRoZSB2ZXJ5IGJlZ2lubmluZyBv&#xd;
ZiB0aGUgS2FyYWYncyBib290IHByb2Nlc3MuCiMKCgojIExvZyBsZXZlbCB3aGVuIHRoZSBwYXgt&#xd;
bG9nZ2luZyBzZXJ2aWNlIGlzIG5vdCBhdmFpbGFibGUKIyBUaGlzIGxldmVsIHdpbGwgb25seSBi&#xd;
ZSB1c2VkIHdoaWxlIHRoZSBwYXgtbG9nZ2luZyBzZXJ2aWNlIGJ1bmRsZQojIGlzIG5vdCBmdWxs&#xd;
eSBhdmFpbGFibGUuCiMgVG8gY2hhbmdlIGxvZyBsZXZlbHMsIHBsZWFzZSByZWZlciB0byB0aGUg&#xd;
b3JnLm9wczRqLnBheC5sb2dnaW5nLmNmZyBmaWxlCiMgaW5zdGVhZC4Kb3JnLm9wczRqLnBheC5s&#xd;
b2dnaW5nLkRlZmF1bHRTZXJ2aWNlTG9nLmxldmVsPUVSUk9SCgojCiMgTmFtZSBvZiB0aGlzIEth&#xd;
cmFmIGluc3RhbmNlLgojCmthcmFmLm5hbWU9YXhlbAoKIwojIERlZmF1bHQgcmVwb3NpdG9yeSB3&#xd;
aGVyZSBidW5kbGVzIHdpbGwgYmUgbG9hZGVkIGZyb20gYmVmb3JlIHVzaW5nCiMgb3RoZXIgTWF2&#xd;
ZW4gcmVwb3NpdG9yaWVzLiAgRm9yIHRoZSBmdWxsIE1hdmVuIGNvbmZpZ3VyYXRpb24sIHNlZQoj&#xd;
IHRoZSBvcmcub3BzNGoucGF4LnVybC5tdm4uY2ZnIGZpbGUuCiMKa2FyYWYuZGVmYXVsdC5yZXBv&#xd;
c2l0b3J5PXN5c3RlbQoKIwojIExvY2F0aW9uIG9mIGEgc2hlbGwgc2NyaXB0IHRoYXQgd2lsbCBi&#xd;
ZSBydW4gd2hlbiBzdGFydGluZyBhIHNoZWxsCiMgc2Vzc2lvbi4gIFRoaXMgc2NyaXB0IGNhbiBi&#xd;
ZSB1c2VkIHRvIGNyZWF0ZSBhbGlhc2VzIGFuZCBkZWZpbmUKIyBhZGRpdGlvbmFsIGNvbW1hbmRz&#xd;
LgojCmthcmFmLnNoZWxsLmluaXQuc2NyaXB0PSR7a2FyYWYuaG9tZX0vZXRjL3NoZWxsLmluaXQu&#xd;
c2NyaXB0CgojCiMgRGVmYXVsdCByb2xlIG5hbWUgdXNlZCBmb3IgY29uc29sZSBhdXRob3JpemF0&#xd;
aW9uIChKTVgsIFNTSCBhbmQgV0VCKQojIFRoZSBzeW50YXggaXMgdGhlIGZvbGxvd2luZzoKIyAg&#xd;
IFtjbGFzc25hbWU6XXByaW5jaXBhbAojIHdoZXJlIGNsYXNzbmFtZSBpcyB0aGUgY2xhc3MgbmFt&#xd;
ZSBvZiB0aGUgcHJpbmNpcGFsIG9iamVjdAojIChkZWZhdWx0cyB0byBvcmcuYXBhY2hlLmthcmFm&#xd;
LmphYXMubW9kdWxlcy5Sb2xlUHJpbmNpcGFsKQojIGFuZCBwcmluY2lwYWwgaXMgdGhlIG5hbWUg&#xd;
b2YgdGhlIHByaW5jaXBhbCBvZiB0aGF0IGNsYXNzCiMgKGRlZmF1bHRzIHRvIGFkbWluKQojCiMg&#xd;
Tm90ZSB0aGF0IHRoaXMgdmFsdWUgY2FuIGJlIG92ZXJyaWRlbiB1c2luZyB0aGUgdmFyaW91cyBD&#xd;
b25maWdBZG1pbgojIGNvbmZpZ3VyYXRpb25zIGZvciBKTVgsIFNTSCBvciB0aGUgV2ViQ29uc29s&#xd;
ZS4KIwprYXJhZi5hZG1pbi5yb2xlPWFkbWluCgojCiMgU2V0IHRoaXMgZW1wdHkgcHJvcGVydHkg&#xd;
dG8gYXZvaWQgZXJyb3JzIHdoZW4gdmFsaWRhdGluZyB4bWwgZG9jdW1lbnRzLgojCnhtbC5jYXRh&#xd;
bG9nLmZpbGVzPQoKIwojIFN1cHByZXNzIHRoZSBiZWxsIGluIHRoZSBjb25zb2xlIHdoZW4gaGl0&#xd;
dGluZyBiYWNrc3BhY2UgdG9vIG1hbnkgdGltZXMKIyBmb3IgZXhhbXBsZQojCmpsaW5lLm5vYmVs&#xd;
bD10cnVlCgojIFdvcmthcm91bmQgZm9yIEtBUkFGLTExMTc6IEpldHR5IHdpbGwgdXNlIGEgSlVM&#xd;
IGxvZ2dlci4Kb3JnLmVjbGlwc2UuamV0dHkudXRpbC5sb2cuY2xhc3M9b3JnLmVjbGlwc2UuamV0&#xd;
dHkudXRpbC5sb2cuSmF2YVV0aWxMb2cKCg==&#xd;
------=_Part_2_1517651635.1380304248152--&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${axelHost}</stringProp>
          <stringProp name="HTTPSampler.port">${rsPort}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout">${httpTimeout}</stringProp>
          <stringProp name="HTTPSampler.response_timeout">${httpTimeout}</stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${rsPath}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="body is txid" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1222556455">${txId}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="x-shs-duplicatemsg: no" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1049025951">x-shs-duplicatemsg: no</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="fetch messages" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">startnextloop</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${threads}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1381082262000</longProp>
        <longProp name="ThreadGroup.end_time">1381082262000</longProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${duration}</stringProp>
        <stringProp name="ThreadGroup.delay">${startupDelay}</stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="list messages" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${axelHost}</stringProp>
          <stringProp name="HTTPSampler.port">${dsPort}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout">${httpTimeout}</stringProp>
          <stringProp name="HTTPSampler.response_timeout">${httpTimeout}</stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${dsPath}/${shsToLocal}?producttype=00000000-0000-0000-0000-000000000000&amp;status=test</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="XPath Extractor" enabled="true">
            <stringProp name="XPathExtractor.default">00000000-0000-0000-0000-000000000000</stringProp>
            <stringProp name="XPathExtractor.refname">txId</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">/shs.message-list/message/@tx.id</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">300</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach message" enabled="true">
          <stringProp name="ForeachController.inputVal">txId</stringProp>
          <stringProp name="ForeachController.returnVal">txId</stringProp>
          <boolProp name="ForeachController.useSeparator">true</boolProp>
        </ForeachController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="fetch message" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${axelHost}</stringProp>
            <stringProp name="HTTPSampler.port">${dsPort}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout">${httpTimeout}</stringProp>
            <stringProp name="HTTPSampler.response_timeout">${httpTimeout}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${dsPath}/${shsToLocal}/${txId}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="body contains txid" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1222556455">${txId}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ack message" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${axelHost}</stringProp>
            <stringProp name="HTTPSampler.port">${dsPort}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout">${httpTimeout}</stringProp>
            <stringProp name="HTTPSampler.response_timeout">${httpTimeout}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${dsPath}/${shsFrom}/${txId}?action=ack</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="body contains txid" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="list messages with corrId" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${axelHost}</stringProp>
            <stringProp name="HTTPSampler.port">${dsPort}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout">${httpTimeout}</stringProp>
            <stringProp name="HTTPSampler.response_timeout">${httpTimeout}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${dsPath}/${shsToLocal}?corrid=${txId}&amp;status=test</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">300</stringProp>
            </ConstantTimer>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="body contains corrId" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="2125878973">corr.id=&quot;${txId}&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="fetch confirms and errors" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">startnextloop</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${threads}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1380906615000</longProp>
        <longProp name="ThreadGroup.end_time">1380906615000</longProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${duration}</stringProp>
        <stringProp name="ThreadGroup.delay">${startupDelay}</stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="list confirm/error messages" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${axelHost}</stringProp>
          <stringProp name="HTTPSampler.port">${dsPort}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout">${httpTimeout}</stringProp>
          <stringProp name="HTTPSampler.response_timeout">${httpTimeout}</stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${dsPath}/${shsToLocal}?producttype=confirm&amp;status=test</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="XPath Extractor" enabled="true">
            <stringProp name="XPathExtractor.default">00000000-0000-0000-0000-000000000000</stringProp>
            <stringProp name="XPathExtractor.refname">txId</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">/shs.message-list/message/@tx.id</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">300</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach message" enabled="true">
          <stringProp name="ForeachController.inputVal">txId</stringProp>
          <stringProp name="ForeachController.returnVal">txId</stringProp>
          <boolProp name="ForeachController.useSeparator">true</boolProp>
        </ForeachController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="fetch error or confirm" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${axelHost}</stringProp>
            <stringProp name="HTTPSampler.port">${dsPort}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout">${httpTimeout}</stringProp>
            <stringProp name="HTTPSampler.response_timeout">${httpTimeout}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${dsPath}/${shsToLocal}/${txId}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="body contains txid" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1222556455">${txId}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="fetch messages with filter=noack" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">startnextloop</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${threads}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1381082262000</longProp>
        <longProp name="ThreadGroup.end_time">1381082262000</longProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${duration}</stringProp>
        <stringProp name="ThreadGroup.delay">${startupDelay}</stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="list messages" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${axelHost}</stringProp>
          <stringProp name="HTTPSampler.port">${dsPort}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout">${httpTimeout}</stringProp>
          <stringProp name="HTTPSampler.response_timeout">${httpTimeout}</stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${dsPath}/${shsToLocal}?producttype=00000000-0000-0000-0000-000000000000&amp;status=test&amp;maxhits=1&amp;filter=noack</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="XPath Extractor" enabled="true">
            <stringProp name="XPathExtractor.default">00000000-0000-0000-0000-000000000000</stringProp>
            <stringProp name="XPathExtractor.refname">txId</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">/shs.message-list/message/@tx.id</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">300</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach message" enabled="true">
          <stringProp name="ForeachController.inputVal">txId</stringProp>
          <stringProp name="ForeachController.returnVal">txId</stringProp>
          <boolProp name="ForeachController.useSeparator">true</boolProp>
        </ForeachController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="fetch message" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${axelHost}</stringProp>
            <stringProp name="HTTPSampler.port">${dsPort}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout">${httpTimeout}</stringProp>
            <stringProp name="HTTPSampler.response_timeout">${httpTimeout}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${dsPath}/${shsToLocal}/${txId}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="body contains txid" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1222556455">${txId}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
